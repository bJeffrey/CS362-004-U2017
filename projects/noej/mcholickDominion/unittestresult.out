---Start Game Over Test---
***Game over Test Passed***
---Start Whose Turn Test---
***Whose Turn Test Passed***
***Whose Turn Test Passed***
***Whose Turn Test Passed***
***Whose Turn Test Passed***
***Whose Turn Test Passed***
***Whose Turn Test Passed***
***Whose Turn Test Passed***
***Whose Turn Test Passed***
***Whose Turn Test Passed***
***Whose Turn Test Passed***
---Ending Whose Turn Test---
---Start Get Cost Test---
**Get Cost Test adventurer Successful**
**Get Cost Test smithy Successful**
**Get Cost Test sea_hag Successful**
**Get Cost Test Curse Successful**
---Ending Get Cost Test---
---Start buyCard Test---
-Testing no buys left-
Pass
-Testing not enough coins-
Pass
-Testing with more than enough coins and buys-
Pass
---Ending buyCard Test---
---Start Smithy card Test---
Pass
---End Smithy card Test---
---Start Adventurer card Test---
Pass
---End Adventurer card Test---
---Start Village card Test---
Pass
---End Village card Test---
---Start Great_hall card Test---
Pass
---End Great_hall card Test---
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:61.54% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:17.24% of 203
Branches executed:22.29% of 175
Taken at least once:9.14% of 175
Calls executed:23.33% of 60

Function 'Sea_hag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 1

Function 'Village'
Lines executed:100.00% of 6
No branches
Calls executed:100.00% of 3

Function 'Council_room'
Lines executed:100.00% of 10
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 4

Function 'Smithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'Adventurer'
Lines executed:66.67% of 18
Branches executed:66.67% of 12
Taken at least once:41.67% of 12
Calls executed:66.67% of 3

Function 'getCost'
Lines executed:26.67% of 30
Branches executed:100.00% of 28
Taken at least once:21.43% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:70.00% of 10
Branches executed:100.00% of 8
Taken at least once:62.50% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:38.65% of 564
Branches executed:42.93% of 417
Taken at least once:26.14% of 417
Calls executed:39.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 240 returned 100% blocks executed 83%
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1410:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:  109:	{
     1318:  110:	  if (kingdomCards[j] == i)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       68:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 12% (fallthrough)
branch  3 taken 88%
        -:  114:		{
       18:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        9:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       59:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       68:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1250:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 18 returned 100% blocks executed 100%
       18:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       18:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       18:  209:  if (state->deckCount[player] < 1)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        2:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      192:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      160:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
      532:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      372:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       16:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 3 returned 100% blocks executed 93%
        3:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        3:  280:  who = state->whoseTurn;
        -:  281:
        3:  282:  if (state->numBuys < 1){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        2:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 11 returned 100% blocks executed 100%
       11:  320:int supplyCount(int card, struct gameState *state) {
       11:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 22 returned 100% blocks executed 100%
       22:  346:int whoseTurn(struct gameState *state) {
       22:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 1 returned 100% blocks executed 73%
        1:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        1:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 53 returned 100% blocks executed 85%
       53:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       53:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        2:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       51:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       51:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       51:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       51:  576:    state->deckCount[player]--;
       51:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       51:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 8 returned 100% blocks executed 27%
        8:  583:int getCost(int cardNumber)
        -:  584:{
        8:  585:  switch( cardNumber ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 25%
branch  3 taken 13%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 13%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 13%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 13%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://Assignment 2
function Adventurer called 1 returned 100% blocks executed 69%
        1:  647:int Adventurer(struct gameState * state) {
        1:  648:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  649:	int drawnTreasure = 0;
        -:  650:	int cardDrawn;
        -:  651:	int temphand[MAX_HAND];
        1:  652:	int z = 0; //counter for temphand
        -:  653:
        4:  654:	while (drawnTreasure < 2) { //while less than 2 treasures have been drawn
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  655:		if (state->deckCount[currentPlayer] < 2) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:			shuffle(currentPlayer, state);
call    0 never executed
        -:  657:		}
        2:  658:		drawCard(currentPlayer, state);
call    0 returned 100%
        2:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        2:  660:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  661:			drawnTreasure++;
        -:  662:		else {
    #####:  663:			temphand[z] = cardDrawn;
    #####:  664:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  665:			z++;
        -:  666:		}
        -:  667:	}
        2:  668:	while (z - 1 >= 0) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  669:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  670:		z = z - 1;
        -:  671:	}
        1:  672:	return 0;
        -:  673:}
        -:  674:
function Smithy called 1 returned 100% blocks executed 100%
        1:  675:int Smithy(struct gameState * state, int handPos) {
        1:  676:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  677:	//+3 Cards
        -:  678:	int i;
        4:  679:	for (i = 0; i < 3; ++i)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  680:	{
        3:  681:		drawCard(currentPlayer, state);
call    0 returned 100%
        -:  682:	}
        -:  683:	//discard card from hand
        1:  684:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  685:	return 0;
        -:  686:}
        -:  687:
function Council_room called 1 returned 100% blocks executed 100%
        1:  688:int Council_room(struct gameState * state, int handPos) {
        1:  689:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  690:	int i;
        -:  691:	//+4 Cards
        5:  692:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  693:	{
        4:  694:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  695:	}
        -:  696:
        -:  697:	//+1 Buy
        1:  698:	state->numBuys++;
        -:  699:
        -:  700:	//Each other player draws a card
        3:  701:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  702:	{
        2:  703:		if ( i == currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  704:		{
        1:  705:			drawCard(i, state);
call    0 returned 100%
        -:  706:		}
        -:  707:	}
        -:  708:
        -:  709:	//put played card in played card pile
        1:  710:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  711:
        1:  712:	return 0;
        -:  713:}
        -:  714:
function Village called 2 returned 100% blocks executed 100%
        2:  715:int Village(struct gameState * state, int handPos) {
        2:  716:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  717:	//+1 Card
        2:  718:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  719:
        -:  720:	//+2 Actions
        2:  721:	state->numActions = state->numActions + 2;
        -:  722:
        -:  723:	//discard played card from hand
        2:  724:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  725:	return 0;
        -:  726:}
        -:  727:
function Sea_hag called 0 returned 0% blocks executed 0%
    #####:  728:int Sea_hag(struct gameState * state) {
    #####:  729:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  730:	int i;
        -:  731:	
    #####:  732:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  733:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  734:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  735:			state->deckCount[i]--;
    #####:  736:			state->discardCount[i]++;
    #####:  737:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  738:		}
        -:  739:	}
    #####:  740:	return 0;
        -:  741:}
function cardEffect called 4 returned 100% blocks executed 15%
        4:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
        4:  749:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
        4:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND];// moved above the if statement
        -:  754:  //int drawntreasure=0;
        -:  755:  //int cardDrawn;
        -:  756:  //int z = 0;// this is the counter for the temp hand
        4:  757:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  758:    nextPlayer = 0;
        -:  759:  }
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
        4:  763:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:    {
        -:  765:    case adventurer:
        1:  766:	    Adventurer(state);
call    0 returned 100%
        -:  767:      /*while(drawntreasure<2){
        -:  768:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  769:	  shuffle(currentPlayer, state);
        -:  770:	}
        -:  771:	drawCard(currentPlayer, state);
        -:  772:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  773:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  774:	  drawntreasure++;
        -:  775:	else{
        -:  776:	  temphand[z]=cardDrawn;
        -:  777:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  778:	  z++;
        -:  779:	}
        -:  780:      }
        -:  781:      while(z-1>=0){
        -:  782:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  783:	z=z-1;
        -:  784:      }
        -:  785:      return 0;*/
        -:  786:			
        -:  787:    case council_room:
        1:  788:	    Council_room(state, handPos);
call    0 returned 100%
        -:  789:      /*//+4 Cards
        -:  790:      for (i = 0; i < 4; i++)
        -:  791:	{
        -:  792:	  drawCard(currentPlayer, state);
        -:  793:	}
        -:  794:			
        -:  795:      //+1 Buy
        -:  796:      state->numBuys++;
        -:  797:			
        -:  798:      //Each other player draws a card
        -:  799:      for (i = 0; i < state->numPlayers; i++)
        -:  800:	{
        -:  801:	  if ( i != currentPlayer )
        -:  802:	    {
        -:  803:	      drawCard(i, state);
        -:  804:	    }
        -:  805:	}
        -:  806:			
        -:  807:      //put played card in played card pile
        -:  808:      discardCard(handPos, currentPlayer, state, 0);
        -:  809:			
        -:  810:      return 0;*/
        -:  811:			
        -:  812:    case feast:
        -:  813:      //gain card with cost up to 5
        -:  814:      //Backup hand
       11:  815:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  816:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       10:  817:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  818:      }
        -:  819:      //Backup hand
        -:  820:
        -:  821:      //Update Coins for Buy
        1:  822:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        1:  823:      x = 1;//Condition to loop on
        3:  824:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  825:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  826:	  if (DEBUG)
        -:  827:	    printf("None of that card left, sorry!\n");
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  831:	  }
        -:  832:	}
        1:  833:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  834:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  835:
        -:  836:	  if (DEBUG){
        -:  837:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  838:	  }
        -:  839:	}
        -:  840:	else{
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  844:	  }
        -:  845:
        1:  846:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        1:  847:	  x = 0;//No more buying cards
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  851:	  }
        -:  852:
        -:  853:	}
        -:  854:      }     
        -:  855:
        -:  856:      //Reset Hand
       11:  857:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  858:	state->hand[currentPlayer][i] = temphand[i];
       10:  859:	temphand[i] = -1;
        -:  860:      }
        -:  861:      //Reset Hand
        -:  862:      			
        1:  863:      return 0;
        -:  864:			
        -:  865:    case gardens:
    #####:  866:      return -1;
        -:  867:			
        -:  868:    case mine:
    #####:  869:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  870:
    #####:  871:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:		
    #####:  876:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  882:	{
    #####:  883:	  return -1;
        -:  884:	}
        -:  885:
    #####:  886:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  887:
        -:  888:      //discard card from hand
    #####:  889:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  890:
        -:  891:      //discard trashed card
    #####:  892:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  893:	{
    #####:  894:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  895:	    {
    #####:  896:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  897:	      break;
        -:  898:	    }
        -:  899:	}
        -:  900:			
    #####:  901:      return 0;
        -:  902:			
        -:  903:    case remodel:
    #####:  904:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  905:
    #####:  906:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  907:	{
    #####:  908:	  return -1;
        -:  909:	}
        -:  910:
    #####:  911:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  912:
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  915:
        -:  916:      //discard trashed card
    #####:  917:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  918:	{
    #####:  919:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  920:	    {
    #####:  921:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  922:	      break;
        -:  923:	    }
        -:  924:	}
        -:  925:
        -:  926:
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case smithy:
        1:  930:	    Smithy(state, handPos);
call    0 returned 100%
        -:  931:      //+3 Cards
        -:  932:      /*for (i = 0; i < 3; i++)
        -:  933:	{
        -:  934:	  drawCard(currentPlayer, state);
        -:  935:	}
        -:  936:			
        -:  937:      //discard card from hand
        -:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:      return 0;*/
        -:  940:		
        -:  941:    case village:
        2:  942:	    Village(state, handPos);
call    0 returned 100%
        -:  943:      /*//+1 Card
        -:  944:      drawCard(currentPlayer, state);
        -:  945:			
        -:  946:      //+2 Actions
        -:  947:      state->numActions = state->numActions + 2;
        -:  948:			
        -:  949:      //discard played card from hand
        -:  950:      discardCard(handPos, currentPlayer, state, 0);
        -:  951:      return 0;*/
        -:  952:		
        -:  953:    case baron:
        2:  954:      state->numBuys++;//Increase buys by 1!
        2:  955:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  956:	int p = 0;//Iterator for hand!
    #####:  957:	int card_not_discarded = 1;//Flag for discard set!
    #####:  958:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  959:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  960:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  961:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  962:	    state->discardCount[currentPlayer]++;
    #####:  963:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  964:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  965:	    }
    #####:  966:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  967:	    state->handCount[currentPlayer]--;
    #####:  968:	    card_not_discarded = 0;//Exit the loop
        -:  969:	  }
    #####:  970:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  971:	    if(DEBUG) {
        -:  972:	      printf("No estate cards in your hand, invalid choice\n");
        -:  973:	      printf("Must gain an estate if there are any\n");
        -:  974:	    }
    #####:  975:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  977:	      state->supplyCount[estate]--;//Decrement estates
    #####:  978:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  979:		isGameOver(state);
call    0 never executed
        -:  980:	      }
        -:  981:	    }
    #####:  982:	    card_not_discarded = 0;//Exit the loop
        -:  983:	  }
        -:  984:			    
        -:  985:	  else{
    #####:  986:	    p++;//Next card
        -:  987:	  }
        -:  988:	}
        -:  989:      }
        -:  990:			    
        -:  991:      else{
        2:  992:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:  993:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        2:  994:	  state->supplyCount[estate]--;//Decrement Estates
        2:  995:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  996:	    isGameOver(state);
call    0 never executed
        -:  997:	  }
        -:  998:	}
        -:  999:      }
        -: 1000:	    
        -: 1001:      
        2: 1002:      return 0;
        -: 1003:		
        -: 1004:    case great_hall:
        -: 1005:      //+1 Card
        1: 1006:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1007:			
        -: 1008:      //+1 Actions
        1: 1009:      state->numActions++;
        -: 1010:			
        -: 1011:      //discard card from hand
        1: 1012:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1013:      return 0;
        -: 1014:		
        -: 1015:    case minion:
        -: 1016:      //+1 action
    #####: 1017:      state->numActions++;
        -: 1018:			
        -: 1019:      //discard card from hand
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1021:			
    #####: 1022:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  state->coins = state->coins + 2;
        -: 1025:	}
        -: 1026:			
    #####: 1027:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //discard hand
    #####: 1030:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1031:	    {
    #####: 1032:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1033:	    }
        -: 1034:				
        -: 1035:	  //draw 4
    #####: 1036:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1037:	    {
    #####: 1038:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1039:	    }
        -: 1040:				
        -: 1041:	  //other players discard hand and redraw if hand size > 4
    #####: 1042:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1043:	    {
    #####: 1044:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1045:		{
    #####: 1046:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1047:		    {
        -: 1048:		      //discard hand
    #####: 1049:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1050:			{
    #####: 1051:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1052:			}
        -: 1053:							
        -: 1054:		      //draw 4
    #####: 1055:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1056:			{
    #####: 1057:			  drawCard(i, state);
call    0 never executed
        -: 1058:			}
        -: 1059:		    }
        -: 1060:		}
        -: 1061:	    }
        -: 1062:				
        -: 1063:	}
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case steward:
    #####: 1067:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1068:	{
        -: 1069:	  //+2 cards
    #####: 1070:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1071:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1072:	}
    #####: 1073:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1074:	{
        -: 1075:	  //+2 coins
    #####: 1076:	  state->coins = state->coins + 2;
        -: 1077:	}
        -: 1078:      else
        -: 1079:	{
        -: 1080:	  //trash 2 cards in hand
    #####: 1081:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1082:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1083:	}
        -: 1084:			
        -: 1085:      //discard card from hand
    #####: 1086:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case tribute:
    #####: 1090:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1091:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1092:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1093:	  state->deckCount[nextPlayer]--;
        -: 1094:	}
    #####: 1095:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1096:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1097:	  state->discardCount[nextPlayer]--;
        -: 1098:	}
        -: 1099:	else{
        -: 1100:	  //No Card to Reveal
        -: 1101:	  if (DEBUG){
        -: 1102:	    printf("No cards to reveal\n");
        -: 1103:	  }
        -: 1104:	}
        -: 1105:      }
        -: 1106:	    
        -: 1107:      else{
    #####: 1108:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1109:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1110:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1111:	    state->deckCount[nextPlayer]++;
    #####: 1112:	    state->discard[nextPlayer][i] = -1;
    #####: 1113:	    state->discardCount[nextPlayer]--;
        -: 1114:	  }
        -: 1115:			    
    #####: 1116:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1117:	} 
    #####: 1118:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1119:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1120:	state->deckCount[nextPlayer]--;
    #####: 1121:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1122:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1123:	state->deckCount[nextPlayer]--;
        -: 1124:      }    
        -: 1125:		       
    #####: 1126:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1127:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1128:	state->playedCardCount++;
    #####: 1129:	tributeRevealedCards[1] = -1;
        -: 1130:      }
        -: 1131:
    #####: 1132:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1133:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1134:	  state->coins += 2;
        -: 1135:	}
        -: 1136:		    
    #####: 1137:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1138:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1139:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1140:	}
        -: 1141:	else{//Action Card
    #####: 1142:	  state->numActions = state->numActions + 2;
        -: 1143:	}
        -: 1144:      }
        -: 1145:	    
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case ambassador:
    #####: 1149:      j = 0;		//used to check if player has enough cards to discard
        -: 1150:
    #####: 1151:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1152:	{
    #####: 1153:	  return -1;				
        -: 1154:	}
        -: 1155:
    #####: 1156:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1157:	{
    #####: 1158:	  return -1;
        -: 1159:	}
        -: 1160:
    #####: 1161:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	{
    #####: 1163:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1164:	    {
    #####: 1165:	      j++;
        -: 1166:	    }
        -: 1167:	}
    #####: 1168:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1169:	{
    #####: 1170:	  return -1;				
        -: 1171:	}
        -: 1172:
        -: 1173:      if (DEBUG) 
        -: 1174:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1175:
        -: 1176:      //increase supply count for choosen card by amount being discarded
    #####: 1177:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1178:			
        -: 1179:      //each other player gains a copy of revealed card
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1181:	{
    #####: 1182:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1183:	    {
    #####: 1184:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1185:	    }
        -: 1186:	}
        -: 1187:
        -: 1188:      //discard played card from hand
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1190:
        -: 1191:      //trash copies of cards returned to supply
    #####: 1192:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
    #####: 1194:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1195:	    {
    #####: 1196:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1197:		{
    #####: 1198:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1199:		  break;
        -: 1200:		}
        -: 1201:	    }
        -: 1202:	}			
        -: 1203:
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case cutpurse:
        -: 1207:
    #####: 1208:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1209:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1210:	{
    #####: 1211:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1212:	    {
    #####: 1213:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1214:		{
    #####: 1215:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1216:		    {
    #####: 1217:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1218:		      break;
        -: 1219:		    }
    #####: 1220:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1221:		    {
    #####: 1222:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1223:			{
        -: 1224:			  if (DEBUG)
        -: 1225:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1226:			}	
    #####: 1227:		      break;
        -: 1228:		    }		
        -: 1229:		}
        -: 1230:					
        -: 1231:	    }
        -: 1232:				
        -: 1233:	}				
        -: 1234:
        -: 1235:      //discard played card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1237:
    #####: 1238:      return 0;
        -: 1239:
        -: 1240:		
        -: 1241:    case embargo: 
        -: 1242:      //+2 Coins
    #####: 1243:      state->coins = state->coins + 2;
        -: 1244:			
        -: 1245:      //see if selected pile is in play
    #####: 1246:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1247:	{
    #####: 1248:	  return -1;
        -: 1249:	}
        -: 1250:			
        -: 1251:      //add embargo token to selected supply pile
    #####: 1252:      state->embargoTokens[choice1]++;
        -: 1253:			
        -: 1254:      //trash card
    #####: 1255:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1256:      return 0;
        -: 1257:		
        -: 1258:    case outpost:
        -: 1259:      //set outpost flag
    #####: 1260:      state->outpostPlayed++;
        -: 1261:			
        -: 1262:      //discard card
    #####: 1263:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1264:      return 0;
        -: 1265:		
        -: 1266:    case salvager:
        -: 1267:      //+1 buy
    #####: 1268:      state->numBuys++;
        -: 1269:			
    #####: 1270:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1271:	{
        -: 1272:	  //gain coins equal to trashed card
    #####: 1273:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1274:	  //trash card
    #####: 1275:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1276:	}
        -: 1277:			
        -: 1278:      //discard card
    #####: 1279:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1280:      return 0;
        -: 1281:		
        -: 1282:    case sea_hag:
    #####: 1283:	    Sea_hag(state);
call    0 never executed
        -: 1284:      /*for (i = 0; i < state->numPlayers; i++){
        -: 1285:	if (i != currentPlayer){
        -: 1286:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1287:	  state->discardCount[i]++;
        -: 1288:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1289:	}
        -: 1290:      }
        -: 1291:      return 0;*/
        -: 1292:		
        -: 1293:    case treasure_map:
        -: 1294:      //search hand for another treasure_map
    #####: 1295:      index = -1;
    #####: 1296:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1297:	{
    #####: 1298:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1299:	    {
    #####: 1300:	      index = i;
    #####: 1301:	      break;
        -: 1302:	    }
        -: 1303:	}
    #####: 1304:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1305:	{
        -: 1306:	  //trash both treasure cards
    #####: 1307:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1308:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1309:
        -: 1310:	  //gain 4 Gold cards
    #####: 1311:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1312:	    {
    #####: 1313:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1314:	    }
        -: 1315:				
        -: 1316:	  //return success
    #####: 1317:	  return 1;
        -: 1318:	}
        -: 1319:			
        -: 1320:      //no second treasure_map found in hand
    #####: 1321:      return -1;
        -: 1322:    }
        -: 1323:	
    #####: 1324:  return -1;
        -: 1325:}
        -: 1326:
function discardCard called 5 returned 100% blocks executed 78%
        5: 1327:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1328:{
        -: 1329:	
        -: 1330:  //if card is not trashed, added to Played pile 
        5: 1331:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1332:    {
        -: 1333:      //add card to played pile
        5: 1334:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1335:      state->playedCardCount++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //set played card to -1
        5: 1339:  state->hand[currentPlayer][handPos] = -1;
        -: 1340:	
        -: 1341:  //remove card from player's hand
        5: 1342:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:    {
        -: 1344:      //reduce number of cards in hand
    #####: 1345:      state->handCount[currentPlayer]--;
        -: 1346:    }
        5: 1347:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1348:    {
        -: 1349:      //reduce number of cards in hand
    #####: 1350:      state->handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:  else 	
        -: 1353:    {
        -: 1354:      //replace discarded card with last card in hand
        5: 1355:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1356:      //set last card to -1
        5: 1357:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1358:      //reduce number of cards in hand
        5: 1359:      state->handCount[currentPlayer]--;
        -: 1360:    }
        -: 1361:	
        5: 1362:  return 0;
        -: 1363:}
        -: 1364:
function gainCard called 4 returned 100% blocks executed 70%
        4: 1365:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1366:{
        -: 1367:  //Note: supplyPos is enum of choosen card
        -: 1368:	
        -: 1369:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1370:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1371:    {
    #####: 1372:      return -1;
        -: 1373:    }
        -: 1374:	
        -: 1375:  //added card for [whoseTurn] current player:
        -: 1376:  // toFlag = 0 : add to discard
        -: 1377:  // toFlag = 1 : add to deck
        -: 1378:  // toFlag = 2 : add to hand
        -: 1379:
        4: 1380:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1381:    {
    #####: 1382:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1383:      state->deckCount[player]++;
        -: 1384:    }
        4: 1385:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1386:    {
    #####: 1387:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1388:      state->handCount[player]++;
        -: 1389:    }
        -: 1390:  else
        -: 1391:    {
        4: 1392:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1393:      state->discardCount[player]++;
        -: 1394:    }
        -: 1395:	
        -: 1396:  //decrease number in supply pile
        4: 1397:  state->supplyCount[supplyPos]--;
        -: 1398:	 
        4: 1399:  return 0;
        -: 1400:}
        -: 1401:
function updateCoins called 9 returned 100% blocks executed 82%
        9: 1402:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1403:{
        -: 1404:  int i;
        -: 1405:	
        -: 1406:  //reset coin count
        9: 1407:  state->coins = 0;
        -: 1408:
        -: 1409:  //add coins for each Treasure card in player's hand
       58: 1410:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1411:    {
       49: 1412:      if (state->hand[player][i] == copper)
branch  0 taken 65% (fallthrough)
branch  1 taken 35%
        -: 1413:	{
       32: 1414:	  state->coins += 1;
        -: 1415:	}
       17: 1416:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1417:	{
    #####: 1418:	  state->coins += 2;
        -: 1419:	}
       17: 1420:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1421:	{
    #####: 1422:	  state->coins += 3;
        -: 1423:	}	
        -: 1424:    }	
        -: 1425:
        -: 1426:  //add bonus
        9: 1427:  state->coins += bonus;
        -: 1428:
        9: 1429:  return 0;
        -: 1430:}
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434://end of dominion.c
