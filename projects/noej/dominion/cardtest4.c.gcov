        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function printTestResults called 2 returned 100% blocks executed 50%
        2:    8:void printTestResults(int test){
        2:    9:      if(test == 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   10:            printf("Test Failed.\n");
call    0 returned 2
    #####:   11:      else if(test == 1)
branch  0 never executed
branch  1 never executed
    #####:   12:            printf("Test Passed.\n");
call    0 never executed
        -:   13:      else
    #####:   14:            printf("Function returned unexpected value.\n");
call    0 never executed
        2:   15:}
        -:   16:
        -:   17:
        -:   18:// This allows the purchase of a card up to 6 value higher instead of three for the mine card
function mineTest called 2 returned 100% blocks executed 86%
        2:   19:int mineTest(){
        -:   20:
        -:   21:      //Default cards, as defined in playDom
        -:   22:      // The following three lines are from player.c to initialize the game
        2:   23:      int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   24:      struct gameState state, stateCopy;
        2:   25:      initializeGame(3,k,1,&state);
call    0 returned 2
        -:   26:
        -:   27:      int x, result;
        2:   28:      stateCopy = state;
        2:   29:      result = cardEffect(mine, 0, 2, 0, &state, 0, &x);
call    0 returned 2
        2:   30:      if(result != 0)
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   31:            return 0;
        -:   32:
    #####:   33:      return 1;
        -:   34:}
        -:   35:
function main called 2 returned 100% blocks executed 100%
        2:   36:int main(){
        -:   37:
        2:   38:      printf("Testing the 'mine' function...\n");
call    0 returned 2
        2:   39:      int testResults = mineTest();
call    0 returned 2
        2:   40:      printTestResults(testResults);
call    0 returned 2
        -:   41:
        2:   42:      return 0;
        -:   43:}
